jsp

@URL : 파일들의 위치
[프로토콜] : //[호스트][:포트][경로][파일명][확장자][쿼리 문자열]

@URI : 존재하는 자원 식별을 위한..
[:포트] 뒷부분

@자바에서 웹 어플리케이션 개발
jsp : 스크립트 방식
서블릿 : 실행코드 방식

@어노테이션 : 클래스나 메서드등 선언시 @사용

@jsp 동작구조
[웹브라우저] jsp페이지 요청 -> [웹서버] jsp에 대한 요청 넘김-> [웹컨테이너] jsp페이지 서블릿 후 컴파일 후 응답 -> [웹브라우저]

* 이러한 과정은 해당 jsp 페이지가 최초로 요청되었을 때 단 한번만 실행

@웹컨테이너
서블릿에 대한 요청 받고 응답 해주는 중간역할
요청을 넘겨받은 컨테이너는 HttpRequest와 HttpResponse객체 생성
서블릿의 doPost(), doGet() 메서드 중 하나를 호출

@jsp페이지 구성요소
디렉티브 : 지시어
- jsp페이지에 대한 설정 정보 지정할때 사용

스크립트 : 스크립트릿 , 표현식 , 로직수행
- 스크립트릿 : 자바코드 실행시 사용되는 코드블럭 <% 자바코드 %
- 표현식 : 웹브라우저에 출력할 부분표시 <%= 출력할 값 %>
* 스크립트릿 안에서 출력할때는..? out.println("출력할 값");

선언부 : 스크립트릿 or 표현식에서 사용될 멤버변수, 메서드 작성시 사용
<%!   %>

@ jsp 내장객체 : response, request, out, session
request : 클라이언트 요청정보 저장하고 있는 객체
response : 요청에 대한 응답정보를 저장하고 있는 객체
out : 출력스트림 객체
session :  세선정보를 저장하고 있는 객체

@response 내장객체 메서드
sendRedirect(url) : 지정된 url로 페이지 이동

@include 디렉티브
<%@include file="로컬 URL" %>
공통적으로 포함하는 내용이 있을때 별도의 파일로 저장해서 필요시 페이지 내에 삽입

@jsp에서 한글처리
- 웹브라우저 응답 페이지의 한글처리 :
 <%@page contentType="text/html;charset=euc-kr" %> / 서블릿은..response.setContentType("text/html; charset=EUC-KR");
- 웹브라우저에서 서버로 오는 파라미터에 한글 있을때 처리방법 :
<% request.setCharacterEncoding("euc-kr"); %>

@ get - 단순요청 (URL뒤에 붙는다)
@ post - 사용자가 입력한 정보와 함께 보낸다 (메세지 몸체에 붙는다 보완성)

@서블릿
자바 클래스 중 오직 서버에서만 해석, 실행되는 클래스
HTTPServlet 상속받아서 구현
* 서버가 서블릿 요청 할때마다 서블릿의 service()메서드 호출됨
*HttpServlet - service() 메서드가 doGet(), doPost()를 자동으로 호출

@포워드액션태그 / 인클루드액션태그 : request 공유한다

@커넥션 풀
- 자원을 빌려쓰고 회수하는 방법
- 커넥션풀에 미리 여분의 커넥션 만들어놓고,  사용자의 요청이 있으면 메모리에 이미 만들어져 있는 커넥션을 부여하고,
사용된 커넥션 객체는 다시 커넥션 풀로 회수됨
- 커넥션 생성 개수를 결정할 수 있음
- 컨테이너에 1개만 만들어지도록 해야함

@싱글폰 패턴
- 인스턴스를 하나만 생성해서 사용하는 패턴

@트랜잭션
- 은행에서 계좌 입,출금 같은 개념
A통장 출금 -> B통장 입금이 확인되면 거래 성사(commit)
DM 작업들을 하나의 단위로 묶어둔 것 - 모든 DML이 성공해야 트랜잭션 성공

-트랜잭션 처리시 오토커밋에 의해 자동으로 commit 사용하면 안됨
setAutoCommit(false) 로 지정해야 함

@jsp 내장객체 : 별다른 선언과정, 객체생성 없이 사용 가능한..
- request, session, application, pageContext 
- 속성(attribute)값을 저장하고 읽을 수 있는 메서드인 setAttribute(), getAttribute() 메서드를 제공함

@session 내장 객체
- 세션 정보를 저장하는 객체
- 웹브라우 요청시 웹브라우저에 관한 정보를 저장하고 관리하는 내장객체
- 웹브라우저 당 1개 할당
- jsp페이지 사이에서 공유됨
- invalidate() 세션의 속성값을 모두 제거★

@application 내장 객체
- 웹 어플리케이션 context의 정보를 저장하는 객체
- 웹 어플리케이션의 설정 정보를 갖는 context와 관련있는 객체
- 웹어플리케이션당 1개의 객체 생성
- 웹사이트 방문자 기록 카운트때 사용

@pageContext 내장 객체
- jsp 페이지에 대한 정보를 저장하는 객체

@config 내장 객체
- 설정 정보를 저장하고 있는 객체

@jsp 내장객체
request / session / application / pageContext 
속성(attribute)값을 저장하고 읽을수 있는
setAttribute(), getAttribute() 메서드 제공함

@내장객체의 영역
page : 한번의 웹브라우저 (클라이언트)의 요청에 대해 하나의 jsp가 호출됨
request : 한번의 웹브라우저 요청에 대해 같은 요청을 공유하는 2개의 페이지 대응가능
=> include 액션태그/ forward액션태그 사용시 같은 request영역이됨
session : 같은 웹브라우저 내에서 요청되는 페이지들은 같은 객체공유함 (회원인증)
application : 같은 웹 어플리케이션에서 요청되는 페이지들은 같은 객체 공유함

@액션태그
 <jsp:include>
 페이지를 모듈화할때 사용
  다른페이지의 실행결과를 현재페이지에 포함시킬때
 <jsp:forward>
 현재페이지에서 다른페이지 이동시킬때 사용
 <jsp:useBean>
 프로그램 로직 가지고있고 DB와 연동해서 작업처리하는 역할
 <jsp:setProperty>, <jsp:getProperty>
 자바빈의 속성값을 저장하고 읽어올 때 사용

@자바빈
- 로직을 담고있는 자바 클래스
- 웹 프로그래밍에서 모듈을 작성해서 재사용 가능함
- 멤버변수 프로퍼티라고 부름

<jsp:useBean id="빈 이름" class="자바빈 클래스 이름" scope="범위" />
id => 생성될 자바빈 객체 이름
class => 객체가 생성될 자바빈 클래스명
scope => 자바빈 객체의 유효범위로 자바빈객체가 공유되는 범위 지정
속성값 : page, request, session, application


@쿠키 / 세션
웹서버 정보의 전달을 통해 어떤 상태를 유지할떄 사용됨
쿠키 =>클라이언트(웹브라우저) 쪽에 저장됨
세션 =>웹 서버쪽에 저장됨

@쿠키
이름 / 값 / 유효기간 / 도메인 / 경로
 response 객체에 addCookie() 사용해서 쿠키추가
생성된 쿠키에 대응하는 값 새롭게 지정 => setValue()
쿠키 지속시간 setMaxAge()

쿠키작성 절차
1. 쿠키생성 -> 쿠키에 필요한 설정 -> 웹브라우저에 쿠키를 전송
웹브라우저에 저장된 쿠키 사용하는 절차
1.웹브라우저의 요청에서 쿠키 얻어옴 -> 리턴된 쿠키배열의 쿠키이름 가져온다 -> 쿠키이름을 통해서 해당 설정값 추출

@세션
웹브라우저가 최초로 접속될떄 생성되며 그 후로 생성된 세션 사용됨